// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package inject

import (
	"cloud.google.com/go/firestore"
	"context"
	"contrib.go.opencensus.io/exporter/stackdriver/monitoredresource"
	"go.opencensus.io/trace"
	"gocloud.dev/blob"
	"gocloud.dev/blob/gcsblob"
	"gocloud.dev/gcp"
	"gocloud.dev/server"
	"gocloud.dev/server/sdserver"
)

// Injectors from gcp.go:

func SetupGCP(ctx context.Context, flags *Config) (*Application, func(), error) {
	stackdriverLogger := sdserver.NewRequestLogger()
	v, cleanup := AppHealthChecks()
	credentials, err := gcp.DefaultCredentials(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	projectID, err := gcp.DefaultProjectID(credentials)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	tokenSource := gcp.CredentialsTokenSource(credentials)
	monitoredresourceInterface := monitoredresource.Autodetect()
	exporter, cleanup2, err := sdserver.NewExporter(projectID, tokenSource, monitoredresourceInterface)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	sampler := trace.AlwaysSample()
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         stackdriverLogger,
		HealthChecks:          v,
		TraceExporter:         exporter,
		DefaultSamplingPolicy: sampler,
		Driver:                defaultDriver,
	}
	serverServer := server.New(options)
	roundTripper := gcp.DefaultTransport()
	httpClient, err := gcp.NewHTTPClient(roundTripper, tokenSource)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	bucket, err := GcpBucket(ctx, flags, httpClient)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	client, err := NewFireStoreClient(ctx, flags)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	application := NewApplication(serverServer, bucket, client)
	return application, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireDefaultDriverValue = &server.DefaultDriver{}
)

// gcp.go:

func GcpBucket(ctx context.Context, flags *Config, client *gcp.HTTPClient) (*blob.Bucket, error) {
	return gcsblob.OpenBucket(ctx, client, flags.Bucket, nil)
}

func NewFireStoreClient(ctx context.Context, c *Config) (*firestore.Client, error) {
	client, err := firestore.NewClient(ctx, c.Project)
	if err != nil {
		return nil, err
	}
	return client, nil
}
